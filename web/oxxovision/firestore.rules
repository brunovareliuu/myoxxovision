rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar que el usuario está autenticado
    function isAuth() {
      return request.auth != null;
    }
    
    // Función para verificar que el usuario está accediendo a sus propios datos
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Función para verificar si un usuario es administrador
    function isAdmin() {
      return isAuth() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'admin';
    }
    
    // Función para verificar si un usuario es administrador o gerente
    function isManagerOrAdmin() {
      return isAuth() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'admin' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'gerente');
    }
    
    // Reglas para la colección de usuarios
    match /users/{userId} {
      // Los usuarios pueden leer y actualizar solo sus propios datos
      // Los administradores pueden leer todos los datos de usuarios
      allow read: if isOwner(userId) || isAdmin();
      
      // Solo el propio usuario puede actualizar sus datos
      allow update: if isOwner(userId);
      
      // Solo el sistema de autenticación o un administrador puede crear nuevos usuarios
      allow create: if isOwner(userId) || isAdmin();
      
      // Solo un administrador puede eliminar usuarios
      allow delete: if isAdmin();
    }
    
    // Reglas para la colección de tiendas OXXO
    match /tiendas/{tiendaId} {
      // Validar que el código de tienda tenga el formato correcto
      function validarCodigoTienda(data) {
        return data.codigoTienda is string && 
               data.codigoTienda.matches('^[A-Z0-9]{3}-[A-Z0-9]{3}-[A-Z0-9]{3}$');
      }
      
      // Validaciones adicionales al crear o actualizar tiendas
      function validarDatosTienda(data) {
        return data.nombre is string && data.nombre.size() > 0 &&
               data.estado is string && data.estado.size() > 0 &&
               data.ciudad is string && data.ciudad.size() > 0 &&
               data.direccion is string && data.direccion.size() > 0 &&
               validarCodigoTienda(data);
      }
      
      // Cualquier usuario autenticado puede leer las tiendas
      allow read: if isAuth();
      
      // Temporalmente permitir que cualquier usuario autenticado cree tiendas
      // Comentamos la validación temporalmente para permitir pruebas
      allow create: if isAuth(); // && validarDatosTienda(request.resource.data);
      
      // Solo administradores y gerentes pueden actualizar o eliminar tiendas
      allow update: if isManagerOrAdmin();
      allow delete: if isAdmin();
    }
    
    // Reglas para la colección de productos
    match /productos/{productId} {
      // Permitir lectura pública de los productos
      allow read: if true;
      // Permitir escritura temporal para cargar los productos
      allow write: if true; // TEMPORAL: cambiar después de la carga inicial
    }
    
    // Reglas para otras colecciones (ejemplo)
    match /ventas/{docId} {
      // Reglas para la colección de ventas (como ejemplo)
      allow read: if isAuth();
      allow write: if isAuth();
    }

    // Reglas para la colección de inventario (como ejemplo)
    match /inventario/{docId} {
      allow read: if isAuth();
      allow write: if isAuth() && (isAdmin() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'gerente');
    }
  }
} 