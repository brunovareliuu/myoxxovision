rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar que el usuario está autenticado
    function isAuth() {
      return request.auth != null;
    }
    
    // Función para verificar que el usuario está accediendo a sus propios datos
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Función para verificar si un usuario es administrador
    function isAdmin() {
      return isAuth() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'admin';
    }
    
    // Función para verificar si un usuario es administrador o gerente
    function isManagerOrAdmin() {
      return isAuth() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'admin' ||
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.rol == 'gerente');
    }
    
    // Función para verificar si un usuario es empleado de una tienda específica
    function isStoreEmployee(tiendaId) {
      return isAuth() && 
             exists(/databases/$(database)/documents/tiendas/$(tiendaId)/empleados/$(request.auth.uid));
    }
    
    // Función para verificar si un usuario puede modificar una tienda
    function canModifyStore(tiendaId) {
      return isAuth() && (
        isAdmin() || 
        isManagerOrAdmin() || 
        isStoreEmployee(tiendaId)
      );
    }
    
    // Reglas para la colección de usuarios
    match /users/{userId} {
      // Los usuarios pueden leer y actualizar solo sus propios datos
      // Los administradores pueden leer todos los datos de usuarios
      allow read: if isOwner(userId) || isAdmin();
      
      // Solo el propio usuario puede actualizar sus datos
      allow update: if isOwner(userId);
      
      // Permitir la creación inicial durante el signup
      allow create: if isAuth() && request.auth.uid == userId;
      
      // Solo un administrador puede eliminar usuarios
      allow delete: if isAdmin();
    }
    
    // Reglas para la colección de tiendas OXXO
    match /tiendas/{tiendaId} {
      // Validar que el código de tienda tenga el formato correcto
      function validarCodigoTienda(data) {
        return data.codigoTienda is string && 
               data.codigoTienda.matches('^[A-Z0-9]{3}-[A-Z0-9]{3}-[A-Z0-9]{3}$');
      }
      
      // Validaciones adicionales al crear o actualizar tiendas
      function validarDatosTienda(data) {
        return data.nombre is string && data.nombre.size() > 0 &&
               data.estado is string && data.estado.size() > 0 &&
               data.ciudad is string && data.ciudad.size() > 0 &&
               data.direccion is string && data.direccion.size() > 0 &&
               validarCodigoTienda(data);
      }
      
      // Cualquier usuario autenticado puede leer las tiendas
      allow read: if isAuth();
      
      // Solo administradores y gerentes pueden crear, actualizar o eliminar tiendas
      allow create: if isManagerOrAdmin();
      allow update: if isManagerOrAdmin();
      allow delete: if isAdmin();

      // Reglas para la subcolección de empleados
      match /empleados/{empleadoId} {
        // Cualquier usuario autenticado puede leer
        allow read: if isAuth();
        
        // Permitir la creación inicial durante el signup
        allow create: if isAuth() && request.auth.uid == empleadoId && 
                     request.resource.data.keys().hasAll(['email', 'nombre', 'uid', 'codigoTienda', 'createdAt', 'activo']);
        
        // Solo el propio empleado o un admin puede actualizar
        allow update: if isAuth() && (request.auth.uid == empleadoId || isAdmin());
        
        // Solo admin puede eliminar
        allow delete: if isAdmin();
      }
      
      // Reglas para la configuración 3D de la tienda
      match /config3d/{configId} {
        // Cualquier usuario autenticado puede leer la configuración
        allow read: if isAuth();
        
        // Solo administradores, gerentes o empleados de la tienda pueden modificar la configuración
        allow create, update: if canModifyStore(tiendaId);
        
        // Solo administradores pueden eliminar la configuración
        allow delete: if isAdmin();
      }
      
      // Reglas para la colección de planogramas (estantes)
      match /planogramas/{planogramaId} {
        // Función para validar datos de planograma
        function validarDatosPlanograma(data) {
          return data.nombre is string && data.nombre.size() > 0 &&
                 data.creadoPor is string;
        }
        
        // Cualquier usuario autenticado puede leer los planogramas
        allow read: if isAuth();
        
        // Solo administradores, gerentes o empleados de la tienda pueden crear/actualizar planogramas
        allow create: if canModifyStore(tiendaId) && validarDatosPlanograma(request.resource.data);
        allow update: if canModifyStore(tiendaId);
        
        // Solo administradores pueden eliminar planogramas
        allow delete: if isAdmin();
        
        // Reglas para la subcolección de productos dentro de cada planograma
        match /productos/{productoId} {
          allow read: if isAuth();
          allow create, update: if canModifyStore(tiendaId);
          allow delete: if canModifyStore(tiendaId);
        }
      }
    }
    
    // Reglas para la colección de productos
    match /productos/{productId} {
      allow read: if true;
      allow write: if isManagerOrAdmin();
    }
    
    // Reglas para otras colecciones (ejemplo)
    match /ventas/{docId} {
      allow read: if isAuth();
      allow write: if isAuth();
    }

    // Reglas para la colección de inventario
    match /inventario/{docId} {
      allow read: if isAuth();
      allow write: if isManagerOrAdmin();
    }

    // REGLAS ESPECIALES PARA SIGNUP Y ACCESO GENERAL
    
    // Regla general para permitir lectura de tiendas durante signup y operación normal
    match /{path=**}/tiendas/{tiendaId} {
      allow read: if request.auth != null;
    }

    // Regla especial para la creación inicial de usuarios
    match /users/{userId} {
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['email', 'nombre', 'uid', 'codigoTienda', 'createdAt', 'activo']);
    }

    // Regla especial para la subcolección de empleados durante signup
    match /tiendas/{tiendaId}/empleados/{empleadoId} {
      allow create: if request.auth != null && 
                   request.auth.uid == empleadoId;
    }

    // Regla adicional para asegurar acceso durante signup
    match /tiendas/{tiendaId}/empleados/{empleadoId} {
      allow write: if request.auth != null && request.auth.uid == empleadoId;
      allow read: if request.auth != null;
    }
  }
}